// import mongoose from "mongoose";

// const ForumPostSchema = new mongoose.Schema({
//     title: { type: String, required: true },
//     content: { type: String, required: true },
//     author: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true },
//     tags: [{ type: String }],
//     imgUrl: [{ type: String }],
//     favoriteCount: { type: Number, default: 0 }, // ƒê·∫øm s·ªë l·∫ßn b√†i vi·∫øt ƒë∆∞·ª£c th√™m v√†o Favorite
//     postStatus: { type: String, enum: ["open", "hidden"], default: "open" },
//     createdAt: { type: Date, default: Date.now }
// });

// // üî• Middleware: Khi x√≥a b√†i vi·∫øt, t·ª± ƒë·ªông x√≥a comment li√™n quan
// ForumPostSchema.pre("remove", async function (next) {
//     await mongoose.model("Comment").deleteMany({ postId: this._id });
//     next();
// });

// // üî• H√†m x·ª≠ l√Ω reaction
// async function addReaction(postId, type) {
//     const validReactions = ["like", "love", "haha", "sad", "angry"];
//     if (!validReactions.includes(type)) throw new Error("Reaction kh√¥ng h·ª£p l·ªá!");

//     await mongoose.model("ForumPost").findByIdAndUpdate(postId, { $inc: { [`reactions.${type}`]: 1 } });
// }
// async function removeReaction(postId, type) {
//     const validReactions = ["like", "love", "haha", "sad", "angry"];
//     if (!validReactions.includes(type)) throw new Error("Reaction kh√¥ng h·ª£p l·ªá!");

//     await mongoose.model("ForumPost").findByIdAndUpdate(postId, { $inc: { [`reactions.${type}`]: -1 } });
// }
// async function getReactions(postId) {
//     const post = await mongoose.model("ForumPost").findById(postId);
//     return post.reactions;
// }

// // Middleware ki·ªÉm tra quy·ªÅn tr∆∞·ªõc khi ƒëƒÉng b√†i
// // ForumPostSchema.pre("save", async function (next) {
// //     const userPermissions = await UserPermissions.findOne({ user: this.author });

// //     if (!userPermissions) {
// //         throw new Error("Kh√¥ng t√¨m th·∫•y quy·ªÅn c·ªßa ng∆∞·ªùi d√πng!");
// //     }

// //     if (userPermissions.isBanned) {
// //         throw new Error("B·∫°n ƒë√£ b·ªã c·∫•m ho·∫°t ƒë·ªông!");
// //     }

// //     if (!userPermissions.canPostForum) {
// //         throw new Error("B·∫°n kh√¥ng c√≥ quy·ªÅn ƒëƒÉng b√†i tr√™n di·ªÖn ƒë√†n!");
// //     }

// //     next();
// // });
// export default mongoose.model("ForumPost", ForumPostSchema);
import mongoose from "mongoose";

const ForumPostSchema = new mongoose.Schema(
    {
        title: { type: String, required: true, trim: true },
        content: { type: String, required: true, trim: true },
        author: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true },
        tags: [{ type: String, index: true }], // Th√™m index ƒë·ªÉ t·ªëi ∆∞u t√¨m ki·∫øm
        imgUrl: [{ type: String }],
        favoriteCount: { type: Number, default: 0 }, // T·ªïng s·ªë l∆∞·ª£t y√™u th√≠ch
        postStatus: { type: String, enum: ["open", "hidden"], default: "open" },
        createdAt: { type: Date, default: Date.now },
        updatedAt: { type: Date, default: Date.now }
    },
    { timestamps: true }
);

// üìå Virtual field: ƒê·∫øm reaction t·ª´ b·∫£ng Reaction
ForumPostSchema.virtual("reactionCount", {
    ref: "Reaction",
    localField: "_id",
    foreignField: "post",
    count: true
});

// üî• Middleware: Khi x√≥a b√†i vi·∫øt, t·ª± ƒë·ªông x√≥a comment li√™n quan
ForumPostSchema.pre("remove", async function (next) {
    try {
        await mongoose.model("Comment").deleteMany({ postId: this._id });
        next();
    } catch (error) {
        next(error);
    }
});

// üî• Middleware c·∫≠p nh·∫≠t `updatedAt` khi ch·ªânh s·ª≠a
ForumPostSchema.pre("findOneAndUpdate", function (next) {
    this.set({ updatedAt: Date.now() });
    next();
});


export default mongoose.model("ForumPost", ForumPostSchema);

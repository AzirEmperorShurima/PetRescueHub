import mongoose from "mongoose";
import Reaction from "../../models/ReactionSchema.js";
import { PostModel } from "../../models/PostSchema.js";

/**
 * üì• Th√™m ho·∫∑c c·∫≠p nh·∫≠t reaction cho b√†i vi·∫øt ho·∫∑c comment
 * @param {String} userId - ID ng∆∞·ªùi d√πng
 * @param {String} targetType - Lo·∫°i ƒë·ªëi t∆∞·ª£ng (Post ho·∫∑c Comment)
 * @param {String} targetId - ID ƒë·ªëi t∆∞·ª£ng c·∫ßn th·∫£ reaction
 * @param {String} reactionType - Lo·∫°i reaction (like, love, haha, wow, sad, angry)
 * @returns {Promise<Object>}- Th√¥ng tin reaction ƒë√£ t·∫°o/c·∫≠p nh·∫≠t
 */
export const modelsMap = {
    Post: PostModel,
    Comment: mongoose.model('Comment'),
    ...PostModel.discriminators,
};
/**
 * Th√™m ho·∫∑c c·∫≠p nh·∫≠t reaction cho b√†i vi·∫øt ho·∫∑c comment
 * @param {Object} params - Th√¥ng tin reaction
 * @param {String} params.userId - ID ng∆∞·ªùi d√πng
 * @param {String} params.targetType - Lo·∫°i ƒë·ªëi t∆∞·ª£ng (Post, Comment, ho·∫∑c c√°c discriminator)
 * @param {String} params.targetId - ID ƒë·ªëi t∆∞·ª£ng c·∫ßn th·∫£ reaction
 * @param {String} params.reactionType - Lo·∫°i reaction (like, love, haha, wow, sad, angry)
 * @returns {Promise<Object>} - Th√¥ng tin reaction ƒë√£ t·∫°o/c·∫≠p nh·∫≠t
 */
export const addOrUpdateReaction = async ({ userId, targetType, targetId, reactionType }) => {

    try {
        if (!mongoose.Types.ObjectId.isValid(targetId) || !mongoose.Types.ObjectId.isValid(userId)) {
            throw new BadRequestError('ID ng∆∞·ªùi d√πng ho·∫∑c target kh√¥ng h·ª£p l·ªá');
        }
        const validTargetTypes = Object.keys(modelsMap);
        if (!validTargetTypes.includes(targetType)) {
            throw new BadRequestError(`Target type kh√¥ng h·ª£p l·ªá, ph·∫£i l√† m·ªôt trong: ${validTargetTypes.join(', ')}`);
        }
        const validReactionTypes = Reaction.schema.paths.reactionType.enumValues;
        if (!validReactionTypes.includes(reactionType)) {
            throw new BadRequestError(`Lo·∫°i reaction kh√¥ng h·ª£p l·ªá, ph·∫£i l√† m·ªôt trong: ${validReactionTypes.join(', ')}`);
        }
        const Model = modelsMap[targetType];
        const target = await Model.findById(targetId)
        if (!target) {
            throw new NotFoundError(`${targetType} kh√¥ng t·ªìn t·∫°i`);
        }
        if (target.isDeleted) {
            throw new BadRequestError(`${targetType} ƒë√£ b·ªã x√≥a, kh√¥ng th·ªÉ th√™m reaction`);
        }
        const existingReaction = await Reaction.findOne({
            authReaction: new mongoose.Types.ObjectId(userId),
            targetType,
            targetId,
        })

        let reaction;
        if (existingReaction) {
            if (existingReaction.reactionType === reactionType) {
                return { success: true, isNew: false, reaction: existingReaction, message: 'Reaction kh√¥ng thay ƒë·ªïi' };
            }
        }
        reaction = await Reaction.create(
            [{
                authReaction: new mongoose.Types.ObjectId(userId),
                targetType,
                targetId,
                reactionType,
            }]
        );

        return { success: true, isNew: !existingReaction, reaction: reaction[0], message: 'Reaction ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω' };
    } catch (error) {
        throw error;
    }
};

/**
 * üìä L·∫•y danh s√°ch reaction theo b√†i vi·∫øt ho·∫∑c comment
 * @param {String} targetType - Lo·∫°i ƒë·ªëi t∆∞·ª£ng (Post ho·∫∑c Comment)
 * @param {String} targetId - ID ƒë·ªëi t∆∞·ª£ng
 * @returns {Promise<Object>} - T·ªïng h·ª£p s·ªë l∆∞·ª£ng m·ªói lo·∫°i reaction
 */

export const getReactionsService = async ({ targetType, targetId }) => {
    try {
        const reactions = await Reaction.find({ targetType, targetId });
        if (!reactions || reactions.length === 0) {
            return { success: false, message: "Kh√¥ng c√≥ reaction n√†o", summary: null };
        }
        const summary = reactions.reduce((acc, curr) => {
            acc[curr.reactionType] = (acc[curr.reactionType] || 0) + 1;
            return acc;
        }, {});

        return summary;
    }
    catch (error) {
        console.error("L·ªói khi l·∫•y danh s√°ch reaction:", error);
        return { success: false, message: "L·ªói server khi l·∫•y danh s√°ch reaction", err: error };
    }

};
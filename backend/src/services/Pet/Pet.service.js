import PetProfile from "../models/PetProfile.js";
import User from "../models/User.js";


// H√†m ti·ªán √≠ch ki·ªÉm tra pet t·ªìn t·∫°i
export const getPetOrThrow = async (petId) => {
    const pet = await PetProfile.findById(petId);
    if (!pet) throw new Error("Th√∫ c∆∞ng kh√¥ng t·ªìn t·∫°i!");
    return pet;
};
/**
 * üÜï T·∫°o th√∫ c∆∞ng m·ªõi
 * @param {String} ownerId - ID c·ªßa ch·ªß s·ªü h·ªØu
 * @param {Object} petData - D·ªØ li·ªáu th√∫ c∆∞ng
 * @returns {Promise<Object>} - H·ªì s∆° th√∫ c∆∞ng ƒë√£ t·∫°o
 */
export const createPetProfile = async (ownerId, petData) => {
    try {
        const userExists = await User.findById(ownerId);
        if (!userExists) throw new Error("Pet Owner Not Exist !");

        // T·∫°o th√∫ c∆∞ng m·ªõi
        const newPet = new PetProfile({ ownerId, ...petData });
        return await newPet.save();
    } catch (error) {
        throw new Error(`L·ªói khi t·∫°o h·ªì s∆° th√∫ c∆∞ng: ${error.message}`);
    }
};


/**
 * üîÑ Chuy·ªÉn ƒë·ªïi ch·ªß s·ªü h·ªØu th√∫ c∆∞ng
 */
// export const transferPetOwnership = async (petId, newOwnerId) => {
//     const pet = await PetProfile.findById(petId);
//     if (!pet) throw new Error("Th√∫ c∆∞ng kh√¥ng t·ªìn t·∫°i!");

//     const newOwner = await User.findById(newOwnerId);
//     if (!newOwner) throw new Error("Ng∆∞·ªùi nh·∫≠n kh√¥ng t·ªìn t·∫°i!");

//     pet.ownerId = newOwnerId;
//     return await pet.save();
// };


/**
 * üì• Upload avatar th√∫ c∆∞ng
 * @param {String} petId - ID c·ªßa th√∫ c∆∞ng
 * @param {String} avatarUrl - URL avatar m·ªõi
 * @returns {Promise<Object>} - H·ªì s∆° th√∫ c∆∞ng ƒë√£ c·∫≠p nh·∫≠t
 */
export const updatePetAvatar = async (petId, avatarUrl) => {
    const pet = await getPetOrThrow(petId);
    pet.avatar = avatarUrl;
    return await pet.save();
};

/**
 * üìÇ Upload gi·∫•y ch·ª©ng nh·∫≠n
 * @param {String} petId - ID c·ªßa th√∫ c∆∞ng
 * @param {Object} certificateData - D·ªØ li·ªáu gi·∫•y ch·ª©ng nh·∫≠n
 * @returns {Promise<Object>} - H·ªì s∆° th√∫ c∆∞ng ƒë√£ c·∫≠p nh·∫≠t
 */
export const uploadPetCertificate = async (petId, certificateData) => {
    const pet = await getPetOrThrow(petId);

    pet.certifications.push({
        name: certificateData.name,
        type: certificateData.type,
        url: certificateData.url,
        issuedDate: new Date(),
    });

    return await pet.save();
};

/**
 * üìë C·∫≠p nh·∫≠t h·ªì s∆° th√∫ c∆∞ng
 * @param {String} petId - ID c·ªßa th√∫ c∆∞ng
 * @param {Object} updatedData - D·ªØ li·ªáu c·∫ßn c·∫≠p nh·∫≠t
 * @returns {Promise<Object>} - H·ªì s∆° th√∫ c∆∞ng ƒë√£ c·∫≠p nh·∫≠t
 */
export const updatePetProfile = async (petId, updatedData) => {
    const pet = await PetProfile.findByIdAndUpdate(
        petId,
        { $set: updatedData },
        { new: true, runValidators: true }
    );
    if (!pet) throw new Error("Th√∫ c∆∞ng kh√¥ng t·ªìn t·∫°i!");
    return pet;
};

/**
 * üóë X√≥a th√∫ c∆∞ng
 * @param {String} petId - ID c·ªßa th√∫ c∆∞ng
 * @returns {Promise<Object>} - H·ªì s∆° th√∫ c∆∞ng ƒë√£ x√≥a
 */
export const deletePet = async (petId) => {
    try {
        const pet = await PetProfile.findByIdAndDelete(petId);
        if (!pet) throw new Error("Th√∫ c∆∞ng kh√¥ng t·ªìn t·∫°i!");
        return pet;
    } catch (error) {
        throw new Error(`L·ªói khi x√≥a th√∫ c∆∞ng: ${error.message}`);
    }
};


/**
 * üîç L·∫•y danh s√°ch th√∫ c∆∞ng theo ch·ªß s·ªü h·ªØu
 * @param {String} ownerId - ID c·ªßa ch·ªß s·ªü h·ªØu
 * @returns {Promise<Array>} - Danh s√°ch th√∫ c∆∞ng
 */
export const getPetsByOwner = async (ownerId, ownerId, page = 1, limit = 10) => {
    return await PetProfile.find({ ownerId })
        .sort({ createdAt: -1 })
        .skip((page - 1) * limit)
        .limit(limit)
        .lean();
};

/**
 * üìë Filter pet profiles based on given criteria
 * @param {Object} filter - Object ch·ª©a c√°c ti√™u ch√≠ filter: { breed, breedName, age, gender }
 * @param {Number} skip - S·ªë l∆∞·ª£ng b·∫£n ghi c·∫ßn b·ªè qua (ph√¢n trang)
 * @param {Number} limit - S·ªë l∆∞·ª£ng b·∫£n ghi c·∫ßn l·∫•y (ph√¢n trang)
 * @returns {Promise<Array>} - Danh s√°ch pet ph√π h·ª£p v·ªõi ti√™u ch√≠
 */
export const filterPetProfiles = async (filter, skip, limit) => {
    const pets = await PetProfile.find(filter)
        .skip(skip)
        .limit(limit)
        .sort({ createdAt: -1 })
        .lean(); // S·∫Øp x·∫øp theo ng√†y t·∫°o, m·ªõi nh·∫•t tr∆∞·ªõc
    const total = await PetProfile.countDocuments(filter);
    return {
        success: true, data: pets, total: total, skip: skip, limit: limit
    }
}
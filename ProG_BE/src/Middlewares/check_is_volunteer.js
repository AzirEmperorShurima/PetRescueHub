
import user from "../models/user.js";
import { getUserFieldFromToken } from "../services/User/User.service.js";
import { COOKIE_PATHS, TOKEN_TYPE } from "../../config.js";
import { redisClient } from "../Cache/User_Cache.js";
import { StatusCodes } from "http-status-codes";

export const clearvolunteerCache = async (userId) => {
    try {
        const redisKey = `volunteer:${userId}`;
        await redisClient.del(redisKey);
        console.log(`üßπ Cache Redis quy·ªÅn volunteer ƒë√£ ƒë∆∞·ª£c x√≥a cho user ${userId}`);
    } catch (error) {
        console.error("‚ùå L·ªói khi x√≥a cache Redis:", error);
    }
};

export const isVolunteer = async (req, res, next) => {
    try {
        const userId = getUserFieldFromToken(req, COOKIE_PATHS.ACCESS_TOKEN.CookieName, "id");
        const userEmail = getUserFieldFromToken(req, COOKIE_PATHS.ACCESS_TOKEN.CookieName, "email");
        const userRoles = getUserFieldFromToken(req, COOKIE_PATHS.ACCESS_TOKEN.CookieName, 'roles');
        const tokenType = getUserFieldFromToken(req, COOKIE_PATHS.ACCESS_TOKEN.CookieName, "tokenType");

        if (!userId || !userEmail || !userRoles || tokenType !== TOKEN_TYPE.ACCESS_TOKEN.name) {
            return res.status(StatusCodes.UNAUTHORIZED).json({ 
                message: "Unauthorized: Token kh√¥ng h·ª£p l·ªá ho·∫∑c b·ªã gi·∫£ m·∫°o!" 
            });
        }

        const primaryCheckIsVolunteer = userRoles.includes('volunteer');
        if (!primaryCheckIsVolunteer) {
            return res.status(StatusCodes.FORBIDDEN).json({ 
                message: "Access Denied: B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p t√†i nguy√™n n√†y" 
            });
        }

        const redisKey = `volunteer:permission:${userId}`;
        const cached = await redisClient.get(redisKey);
        
        if (cached === "true") {
            console.log("‚úÖ ƒê√£ x√°c th·ª±c quy·ªÅn volunteer t·ª´ Redis cache!");
            req.user = {
                _id: userId,
                email: userEmail,
                roles: userRoles,
            };
            return next();
        }

        const foundUser = await user.findById(userId).populate("roles", "name");
        if (!foundUser) {
            return res.status(StatusCodes.NOT_FOUND).json({ 
                message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng" 
            });
        }

        if (foundUser.email !== userEmail) {
            return res.status(StatusCodes.FORBIDDEN).json({ 
                message: "Access Denied: Th√¥ng tin ng∆∞·ªùi d√πng kh√¥ng kh·ªõp!" 
            });
        }

        const isVolunteer = foundUser.roles.some(r => r.name === "volunteer");
        if (!isVolunteer) {
            return res.status(StatusCodes.FORBIDDEN).json({ 
                message: "Access Denied: B·∫°n kh√¥ng c√≥ quy·ªÅn volunteer!" 
            });
        }

        await redisClient.setEx(redisKey, 900, "true");
        console.log("‚úÖ X√°c th·ª±c quy·ªÅn volunteer t·ª´ DB v√† ghi v√†o Redis!");
        
        req.user = {
            _id: userId,
            email: userEmail,
            roles: userRoles,
        };
        
        next();
    } catch (error) {
        console.error("‚ùå L·ªói trong middleware isVolunteer:", error);
        return res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ 
            message: "L·ªói m√°y ch·ªß khi x√°c th·ª±c quy·ªÅn volunteer!" 
        });
    }
};

export const checkVolunteer = async (req, res, next) => {
    try {
        const { emailOrUsername, password } = req.body;

        if (!emailOrUsername) {
            return res.status(StatusCodes.BAD_REQUEST).json({ 
                message: "Email ho·∫∑c username l√† b·∫Øt bu·ªôc" 
            });
        }
        
        if (!password) {
            return res.status(StatusCodes.BAD_REQUEST).json({ 
                message: "M·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc" 
            });
        }

        const foundUser = await user.findOne({
            $or: [
                { email: emailOrUsername },
                { username: emailOrUsername }
            ]
        }).populate("roles", "name");

        if (!foundUser) {
            return res.status(StatusCodes.NOT_FOUND).json({ 
                message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" 
            });
        }

        const hasVolunteerRole = foundUser.roles.some(role => role.name === 'volunteer');
        if (!hasVolunteerRole) {
            return res.status(StatusCodes.FORBIDDEN).json({ 
                message: "B·∫°n kh√¥ng ph·∫£i volunteer n√™n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p v√†o t√†i nguy√™n n√†y!" 
            });
        }

        req.user = foundUser;
        next();
    } catch (error) {
        console.error("‚ùå L·ªói trong middleware checkVolunteer:", error);
        return res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ 
            message: "L·ªói m√°y ch·ªß khi x√°c th·ª±c vai tr√≤ volunteer!" 
        });
    }
};

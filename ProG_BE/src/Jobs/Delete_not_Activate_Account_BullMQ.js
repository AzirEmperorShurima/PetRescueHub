import { Queue, Worker } from "bullmq";
import IORedis from "ioredis";
import user from "../models/user.js";
import { REDIS_HOST, REDIS_PASSWORD, REDIS_PORT, REDIS_USERNAME } from '../Config/redis.config.js';

const connection = new IORedis({
    username: REDIS_USERNAME,
    password: REDIS_PASSWORD,
    host: REDIS_HOST,
    port: REDIS_PORT,
    maxRetriesPerRequest: null,
    connectTimeout: 10000,        // TƒÉng th·ªùi gian timeout k·∫øt n·ªëi l√™n 10s
    retryStrategy: (times) => {
        return Math.min(times * 50, 2000);
    },
    reconnectOnError: (err) => {
        const targetError = 'READONLY';
        if (err.message.includes(targetError)) {
            return true;
        }
        return false;
    }
});

// Th√™m event listener ƒë·ªÉ theo d√µi tr·∫°ng th√°i k·∫øt n·ªëi
connection.on('connect', () => {
    console.log('‚úÖ K·∫øt n·ªëi Redis th√†nh c√¥ng!');
});

connection.on('error', (error) => {
    console.error('‚ùå L·ªói k·∫øt n·ªëi Redis:', error);
});

const cleanupQueue = new Queue("cleanupQueue", { connection });

export const scheduleCleanupJob = async () => {
    try {
        await cleanupQueue.add("deleteUnverified", {}, {
            repeat: { cron: "0 0 * * *", tz: "Asia/Ho_Chi_Minh" } // Ch·∫°y l√∫c 00:00 theo gi·ªù Vi·ªát Nam
        });
        console.log("‚úÖ Job x√≥a t√†i kho·∫£n ch∆∞a active ƒë√£ ƒë∆∞·ª£c th√™m v√†o queue th√†nh c√¥ng!");
        console.log("‚è∞ Job s·∫Ω ch·∫°y t·ª± ƒë·ªông v√†o 00:00 h√†ng ng√†y (GMT+7)");
    } catch (error) {
        console.error("‚ùå L·ªói khi th√™m job v√†o queue:", error);
    }
}


new Worker("cleanupQueue", async () => {
    console.log("üî• ƒêang ch·∫°y cron job x√≥a t√†i kho·∫£n ch∆∞a active...");
    try {
        const sevenDaysAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
        const result = await user.deleteMany({
            isActive: false,
            isCompromised: false,
            createdAt: { $lt: sevenDaysAgo }
        });

        console.log(`‚úÖ ƒê√£ x√≥a ${result.deletedCount} t√†i kho·∫£n ch∆∞a x√°c minh v√† kh√¥ng b·ªã x√¢m ph·∫°m.`);
    } catch (error) {
        console.error("‚ùå L·ªói khi x√≥a t√†i kho·∫£n ch∆∞a active:", error);
    }
}, { connection });


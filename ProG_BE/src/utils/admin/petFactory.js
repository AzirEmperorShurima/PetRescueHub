import fs from "fs";
import { v4 as uuidv4 } from "uuid";
import models_list from "../../models/modelsExport.js";

export const createPetsFromJSON = async (jsonPath = "./petSeed.json") => {
    try {
        // ƒê·ªçc d·ªØ li·ªáu t·ª´ file JSON
        const rawData = fs.readFileSync(jsonPath, "utf8");
        const pets = JSON.parse(rawData);
        
        console.log(`üêæ B·∫Øt ƒë·∫ßu th√™m ${pets.length} th√∫ c∆∞ng v√†o c∆° s·ªü d·ªØ li·ªáu...`);
        
        let successCount = 0;
        let errorCount = 0;
        
        for (const pet of pets) {
            try {
                // T√¨m ch·ªß s·ªü h·ªØu d·ª±a tr√™n email
                const owner = await models_list.user.findOne({ email: pet.ownerEmail });
                
                if (!owner) {
                    console.warn(`‚ùå Kh√¥ng t√¨m th·∫•y ch·ªß s·ªü h·ªØu v·ªõi email "${pet.ownerEmail}". B·ªè qua th√∫ c∆∞ng "${pet.name}"...`);
                    errorCount++;
                    continue;
                }
                
                // Ki·ªÉm tra xem microchipId ƒë√£ t·ªìn t·∫°i ch∆∞a (n·∫øu c√≥)
                if (pet.microchipId) {
                    const existingPet = await models_list.PetProfile.findOne({ microchipId: pet.microchipId });
                    if (existingPet) {
                        console.warn(`‚ö†Ô∏è Th√∫ c∆∞ng v·ªõi microchipId "${pet.microchipId}" ƒë√£ t·ªìn t·∫°i. B·ªè qua th√∫ c∆∞ng "${pet.name}"...`);
                        errorCount++;
                        continue;
                    }
                }
                
                // T·∫°o ƒë·ªëi t∆∞·ª£ng th√∫ c∆∞ng m·ªõi
                const newPet = new models_list.PetProfile({
                    name: pet.name,
                    age: pet.age,
                    petDob: pet.petDob ? new Date(pet.petDob) : null,
                    breed: pet.breed,
                    breedName: pet.breedName,
                    petState: pet.petState,
                    gender: pet.gender,
                    petDetails: pet.petDetails,
                    weight: pet.weight,
                    height: pet.height,
                    reproductiveStatus: pet.reproductiveStatus,
                    vaccinationStatus: pet.vaccinationStatus || [],
                    ownerId: owner._id,
                    avatar: pet.avatar,
                    microchipId: pet.microchipId,
                    petAlbum: pet.petAlbum || []
                });
                
                // L∆∞u th√∫ c∆∞ng v√†o c∆° s·ªü d·ªØ li·ªáu
                await newPet.save();
                successCount++;
                console.log(`‚úÖ ƒê√£ th√™m th√∫ c∆∞ng: ${pet.name} (Ch·ªß s·ªü h·ªØu: ${owner.username})`);
            } catch (error) {
                console.error(`‚ùå L·ªói khi th√™m th√∫ c∆∞ng "${pet.name}": ${error.message}`);
                errorCount++;
            }
        }
        
        console.log(`üéâ Ho√†n th√†nh! ƒê√£ th√™m th√†nh c√¥ng ${successCount}/${pets.length} th√∫ c∆∞ng. C√≥ ${errorCount} l·ªói.`);
    } catch (error) {
        console.error(`‚ùå L·ªói khi ƒë·ªçc file ho·∫∑c x·ª≠ l√Ω d·ªØ li·ªáu: ${error.message}`);
    }
};
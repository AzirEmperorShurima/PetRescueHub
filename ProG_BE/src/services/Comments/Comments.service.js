/**
 * üì• Th√™m comment v√†o b√†i vi·∫øt
 * @param {String} postId - ID b√†i vi·∫øt
 * @param {String} content - N·ªôi dung comment
 * @param {String} userId - ID ng∆∞·ªùi d√πng g·ª≠i comment
 * @returns {Promise<Object>} - K·∫øt qu·∫£ t·∫°o comment
 */

import { CommentModel } from "../../models/CommentsSchema.js";
import { ForumPost } from "../../models/PostSchema.js";

export const addCommentService = async (postId, content, userId) => {
    try {
        // Ki·ªÉm tra b√†i vi·∫øt c√≥ t·ªìn t·∫°i kh√¥ng
        const post = await ForumPost.findById(postId);
        if (!post) {
            return { success: false, message: 'B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i' };
        }

        // T·∫°o comment m·ªõi
        const newComment = new CommentModel({
            content,
            author: userId,
            post: postId,
            postType: 'ForumPost',
        });

        // L∆∞u comment v√†o DB
        await newComment.save();
        return { success: true, comment: newComment };

    } catch (error) {
        console.error(error);
        return { success: false, message: 'L·ªói server khi th√™m comment' };
    }
};


/**
 * üì• Th√™m reply cho m·ªôt comment (tr·∫£ l·ªùi comment cha)
 * @param {String} postId - ID b√†i vi·∫øt
 * @param {String} content - N·ªôi dung reply
 * @param {String} userId - ID ng∆∞·ªùi g·ª≠i reply
 * @param {String} parentComment - ID comment cha
 * @returns {Promise<Object>} - K·∫øt qu·∫£ t·∫°o reply
 */
export const replyCommentService = async (postId, content, userId, parentComment) => {
    try {
        // Ki·ªÉm tra b√†i vi·∫øt c√≥ t·ªìn t·∫°i kh√¥ng
        const post = await ForumPost.findById(postId);
        if (!post) {
            return { success: false, message: 'B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i' };
        }

        // Ki·ªÉm tra comment cha c√≥ t·ªìn t·∫°i kh√¥ng
        const parent = await CommentModel.findById(parentComment);
        if (!parent) {
            return { success: false, message: 'Comment cha kh√¥ng t·ªìn t·∫°i' };
        }

        // T·∫°o comment m·ªõi (reply)
        const newComment = new CommentModel({
            content,
            author: userId,
            post: postId,
            postType: 'ForumPost',
            parentComment,
            depth: 1
        });

        // L∆∞u reply v√†o DB
        await newComment.save();

        // C·∫≠p nh·∫≠t comment cha ƒë·ªÉ th√™m reply v√†o
        await CommentModel.findByIdAndUpdate(parentComment, {
            $push: { replies: newComment._id }
        });

        return { success: true, comment: newComment };

    } catch (error) {
        console.error(error);
        return { success: false, message: 'L·ªói server khi th√™m reply' };
    }
};

/**
 * üóë Xo√° comment theo ID
 * @param {String} commentId - ID comment c·∫ßn xo√°
 * @param {String} userId - ID ng∆∞·ªùi y√™u c·∫ßu xo√° (ki·ªÉm tra quy·ªÅn)
 * @returns {Promise<Object>} - K·∫øt qu·∫£ xo√° comment
 */
export const deleteCommentService = async (commentId, userId) => {
    try {
        const comment = await CommentModel.findById(commentId);
        if (!comment) {
            return { success: false, message: 'Comment kh√¥ng t·ªìn t·∫°i' };
        }

        if (comment.author.toString() !== userId) {
            return { success: false, message: 'Kh√¥ng c√≥ quy·ªÅn xo√° comment n√†y' };
        }

        await comment.remove(); // middleware s·∫Ω t·ª± xo√° kh·ªèi replies c·ªßa parent (n·∫øu c√≥)

        return { success: true, message: 'Xo√° comment th√†nh c√¥ng' };
    } catch (error) {
        console.error(error);
        return { success: false, message: 'L·ªói server khi xo√° comment' };
    }
};

/**
 * üìù C·∫≠p nh·∫≠t n·ªôi dung comment
 * @param {String} commentId - ID comment c·∫ßn c·∫≠p nh·∫≠t
 * @param {String} userId - ID ng∆∞·ªùi d√πng (ki·ªÉm tra quy·ªÅn)
 * @param {String} content - N·ªôi dung m·ªõi
 * @returns {Promise<Object>} - K·∫øt qu·∫£ c·∫≠p nh·∫≠t comment
 */
export const updateCommentService = async (commentId, userId, content) => {
    try {
        const comment = await CommentModel.findById(commentId);
        if (!comment) {
            return { success: false, message: 'Comment kh√¥ng t·ªìn t·∫°i' };
        }

        if (comment.author.toString() !== userId) {
            return { success: false, message: 'Kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a comment n√†y' };
        }

        comment.content = content.trim();
        await comment.save();

        return { success: true, message: 'C·∫≠p nh·∫≠t comment th√†nh c√¥ng', comment };
    } catch (error) {
        console.error(error);
        return { success: false, message: 'L·ªói server khi c·∫≠p nh·∫≠t comment' };
    }
};

/**
 * üìÑ L·∫•y t·∫•t c·∫£ comment theo post ID
 * @param {String} postId - ID b√†i vi·∫øt
 * @returns {Promise<Object>} - Danh s√°ch comment
 */
export const getCommentsByPostIdService = async (postId) => {
    try {
        const comments = await CommentModel.find({ post: postId })
            .populate('author', 'username avatar')
            .populate('replies')
            .sort({ createdAt: 1 }); // ho·∫∑c -1 n·∫øu mu·ªën m·ªõi nh·∫•t tr∆∞·ªõc

        return { success: true, comments };
    } catch (error) {
        console.error(error);
        return { success: false, message: 'L·ªói server khi l·∫•y danh s√°ch comment' };
    }
};

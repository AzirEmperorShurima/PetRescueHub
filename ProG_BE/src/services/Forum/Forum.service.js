import { CommentModel } from "../../models/CommentsSchema";
import FavouriteList from "../../models/FavouriteList";
import Reaction from "../../models/ReactionSchema";
import PostModel from "../../models/PostSchema";

/**
 * üì• L·∫•y danh s√°ch b√†i vi·∫øt trong di·ªÖn ƒë√†n
 * @param {Object} queryParams - Tham s·ªë truy v·∫•n t·ª´ client
 * @param {Number} queryParams.page - S·ªë trang c·∫ßn l·∫•y (m·∫∑c ƒë·ªãnh l√† 1)
 * @param {Number} queryParams.limit - S·ªë b√†i vi·∫øt tr√™n m·ªói trang (m·∫∑c ƒë·ªãnh l√† 10)
 * @param {String} queryParams.tag - Th·∫ª b√†i vi·∫øt c·∫ßn t√¨m ki·∫øm
 * @param {String} queryParams.search - Ti√™u ƒë·ªÅ ho·∫∑c n·ªôi dung b√†i vi·∫øt c·∫ßn t√¨m ki·∫øm
 * @param {String} queryParams.postType - L·ªçc theo lo·∫°i b√†i vi·∫øt (t√πy ch·ªçn)
 * @returns {Promise<Object>} - Danh s√°ch b√†i vi·∫øt
 */
export const getListForumPosts = async ({ page = 1, limit = 10, tag, search, postType, sort }) => {
    try {
        const filter = {};
        if (tag) filter.tags = tag;
        if (search) filter.$text = { $search: search }; // S·ª≠ d·ª•ng index text ƒë·ªÉ t√¨m ki·∫øm t·ªëi ∆∞u h∆°n
        if (postType) filter.postType = postType; // L·ªçc theo lo·∫°i b√†i vi·∫øt n·∫øu c√≥

        const posts = await PostModel.find(filter)
            .populate("author", "username")
            .sort(sort)
            .skip((page - 1) * limit)
            .limit(parseInt(limit))
            .lean();

        return { success: true, data: posts };
    } catch (error) {
        return { success: false, message: "L·ªói server khi l·∫•y danh s√°ch b√†i vi·∫øt", error };
    }
};

/**
 * üì• L·∫•y th√¥ng tin b√†i vi·∫øt theo ID
 * @param {String} id - ID c·ªßa b√†i vi·∫øt c·∫ßn l·∫•y
 * @returns {Promise<Object>} - B√†i vi·∫øt t√¨m th·∫•y ho·∫∑c th√¥ng b√°o l·ªói
 */
export const getPostById = async (id) => {
    try {
        if (!mongoose.Types.ObjectId.isValid(id)) {
            return { success: false, message: "ID kh√¥ng h·ª£p l·ªá" };
        }

        const post = await PostModel.findById(id)
            .populate("author", "username")
            .lean(); // TƒÉng t·ªëc truy v·∫•n

        if (!post) return { success: false, message: "B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i" };

        return { success: true, data: post };
    } catch (error) {
        return { success: false, message: "L·ªói server khi l·∫•y b√†i vi·∫øt", error };
    }
};

/**
 * üì• T·∫°o b√†i vi·∫øt m·ªõi
 * @param {String} title - Ti√™u ƒë·ªÅ b√†i vi·∫øt
 * @param {String} content - N·ªôi dung b√†i vi·∫øt
 * @param {Array} tags - C√°c th·∫ª b√†i vi·∫øt
 * @param {Array} imgUrl - C√°c URL ·∫£nh trong b√†i vi·∫øt
 * @param {String} userId - ID ng∆∞·ªùi d√πng t·∫°o b√†i vi·∫øt
 * @param {String} postType - Lo·∫°i b√†i vi·∫øt (m·∫∑c ƒë·ªãnh l√† "ForumPost")
 * @returns {Promise<Object>} - B√†i vi·∫øt m·ªõi ƒë∆∞·ª£c t·∫°o
 */
export const createPost = async (title, content, tags, imgUrl, userId, postType = "ForumPost") => {
    try {
        // Ki·ªÉm tra ƒë·∫ßu v√†o
        if (!title?.trim() || !content?.trim() || !userId) {
            return { success: false, message: "Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt" };
        }

        const newPost = new PostModel({
            title: title.trim(),
            content: content.trim(),
            author: userId,
            tags: tags || [],
            imgUrl: imgUrl || [],
            postType,
            postStatus: "open",
        });

        await newPost.save();
        return { success: true, message: "ƒêƒÉng b√†i th√†nh c√¥ng!", post: newPost };
    } catch (error) {
        return { success: false, message: "L·ªói server khi ƒëƒÉng b√†i", error };
    }
};


/**
 * üì• C·∫≠p nh·∫≠t b√†i vi·∫øt di·ªÖn ƒë√†n
 * @param {String} postId - ID b√†i vi·∫øt c·∫ßn c·∫≠p nh·∫≠t
 * @param {String} userId - ID ng∆∞·ªùi d√πng y√™u c·∫ßu c·∫≠p nh·∫≠t
 * @param {Object} updateData - D·ªØ li·ªáu c·∫ßn c·∫≠p nh·∫≠t (title, content, tags, imgUrl, postStatus)
 * @returns {Promise<Object>} - B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t ho·∫∑c th√¥ng b√°o l·ªói
 */
export const updatePost = async (postId, userId, updateData) => {
    try {
        if (Object.keys(updateData).length === 0) {
            return { success: false, message: "Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá ƒë·ªÉ c·∫≠p nh·∫≠t" };
        }

        const post = await PostModel.findOneAndUpdate(
            { _id: postId, author: userId },
            updateFields,
            { new: true, runValidators: true }
        );

        if (!post) {
            return { success: false, message: "Kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t ho·∫∑c b√†i vi·∫øt kh√¥ng t·ªìn t·∫°i" };
        }
        return { success: true, message: "C·∫≠p nh·∫≠t th√†nh c√¥ng", post };
    } catch (error) {
        return { success: false, message: "L·ªói server khi c·∫≠p nh·∫≠t b√†i vi·∫øt", error };
    }
};


/**
 * üóë X√≥a b√†i vi·∫øt di·ªÖn ƒë√†n
 * @param {String} postId - ID b√†i vi·∫øt c·∫ßn x√≥a
 * @param {String} userId - ID ng∆∞·ªùi d√πng y√™u c·∫ßu x√≥a
 * @returns {Promise<Object>} - K·∫øt qu·∫£ x√≥a b√†i vi·∫øt
 */
export const deletePost = async (postId, userId) => {
    try {
        // K·∫øt h·ª£p findOneAndDelete v·ªõi lean() ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t
        const post = await PostModel.findOneAndDelete(
            { _id: postId, author: userId },
            { lean: true }
        ).exec();

        if (!post) {
            return { success: false, message: "Kh√¥ng c√≥ quy·ªÅn x√≥a ho·∫∑c b√†i vi·∫øt kh√¥ng t·ªìn t·∫°i" };
        }

        // Th·ª±c hi·ªán c√°c thao t√°c x√≥a song song v·ªõi error handling ri√™ng
        await Promise.all([
            CommentModel.deleteMany({ postId }).exec().catch(err => {
                console.error('Error deleting comments:', err.message);
                throw err; // C√≥ th·ªÉ b·ªè throw n·∫øu mu·ªën ti·∫øp t·ª•c d√π l·ªói
            }),
            Reaction.deleteMany({ targetId: postId }).exec().catch(err => {
                console.error('Error deleting reactions:', err.message);
                throw err;
            }),
            FavouriteList.updateMany(
                { "items.postId": postId },
                { $pull: { items: { postId } } }
            ).exec().catch(err => {
                console.error('Error updating favourites:', err.message);
                throw err;
            })
        ]);

        return { success: true, message: "X√≥a b√†i vi·∫øt th√†nh c√¥ng!" };
    } catch (error) {
        console.error('Delete post error:', { postId, error: error.message });
        return {
            success: false,
            message: error.message || "L·ªói server khi x√≥a b√†i vi·∫øt",
            error: error.message
        };
    }
};

// export const deletePost = async (postId, userId) => {
//     const session = await PostModel.startSession();
//     session.startTransaction();

//     try {
//         // S·ª≠ d·ª•ng findOneAndDelete thay v√¨ find + delete ri√™ng l·∫ª
//         const deletedPost = await PostModel.findOneAndDelete(
//             { _id: postId, author: userId },
//             { session }
//         );

//         if (!deletedPost) {
//             throw new Error("Kh√¥ng c√≥ quy·ªÅn x√≥a ho·∫∑c b√†i vi·∫øt kh√¥ng t·ªìn t·∫°i");
//         }

//         // Th·ª±c hi·ªán c√°c thao t√°c x√≥a song song
//         await Promise.all([
//             CommentModel.deleteMany({ postId }).session(session),
//             Reaction.deleteMany({ targetId: postId }).session(session),
//             FavouriteList.updateMany(
//                 { "items.postId": postId },
//                 { $pull: { items: { postId } } }
//             ).session(session)
//         ]);

//         await session.commitTransaction();
//         return { success: true, message: "X√≥a b√†i vi·∫øt th√†nh c√¥ng!" };
//     } catch (error) {
//         await session.abortTransaction();
//         console.error('Delete post error:', error);

//         return {
//             success: false,
//             message: error.message || "L·ªói server khi x√≥a b√†i vi·∫øt",
//             error: process.env.NODE_ENV === 'development' ? error : undefined
//         };
//     } finally {
//         session.endSession();
//     }
// };
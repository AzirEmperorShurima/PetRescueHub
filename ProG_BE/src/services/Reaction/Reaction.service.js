import Reaction from "../../models/ReactionSchema";

/**
 * üì• check lo·∫°i post
 * @param {String} targetId - Id ƒë·ªëi t∆∞·ª£ng
 * @param {String} rawTargetTypes - Lo·∫°i post (Post, Comment, Question, ForumPost)
 * @returns {Promise<Object>} - ƒê·ªëi t∆∞·ª£ng ch·ª©a lo·∫°i post v√† th√¥ng tin b√†i vi·∫øt
 * @returns {null} - N·∫øu Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt ho·∫∑c lo·∫°i post kh√¥ng h·ª£p l·ªá
 */
export const getTargetType = async (targetId, rawTargetTypes) => {
    const targetTypes = rawTargetTypes.toString().trim().toLowerCase()

    const validTypes = ["post", "comment", "question", "forumpost"];
    if (!validTypes.includes(targetTypes)) {
        throw new BadRequestError("Lo·∫°i ƒë·ªëi t∆∞·ª£ng kh√¥ng h·ª£p l·ªá");
    }

    let target = await mongoose.model(targetTypes).findById(targetId);
    if (target) {
        return { targetType: targetTypes, target };
    }
    return null;
};

/**
 * üì• Th√™m ho·∫∑c c·∫≠p nh·∫≠t reaction cho b√†i vi·∫øt ho·∫∑c comment
 * @param {String} userId - ID ng∆∞·ªùi d√πng
 * @param {String} targetType - Lo·∫°i ƒë·ªëi t∆∞·ª£ng (Post ho·∫∑c Comment)
 * @param {String} targetId - ID ƒë·ªëi t∆∞·ª£ng c·∫ßn th·∫£ reaction
 * @param {String} reactionType - Lo·∫°i reaction (like, love, haha, wow, sad, angry)
 * @returns {Promise<Object>}- Th√¥ng tin reaction ƒë√£ t·∫°o/c·∫≠p nh·∫≠t
 */

export const addOrUpdateReaction = async ({ userId, targetType, targetId, reactionType }) => {

    // if (!["Post", "Question", "ForumPost", "Comment"].includes(targetType)) {
    //     throw new BadRequestError("Lo·∫°i ƒë·ªëi t∆∞·ª£ng kh√¥ng h·ª£p l·ªá");
    // }
    if (!mongoose.Types.ObjectId.isValid(targetId)) {
        throw new BadRequestError("ID ƒë·ªëi t∆∞·ª£ng kh√¥ng h·ª£p l·ªá");
    }

    const Model = mongoose.model(targetType); // S·ª≠ d·ª•ng targetType ƒë·ªông
    const target = await Model.findById(targetId);
    if (!target) {
        throw new NotFoundError(`${targetType} kh√¥ng t·ªìn t·∫°i`);
    }

    const existed = await Reaction.findOne({ authReaction: userId, targetType, targetId });

    if (existed) {
        if (existed.reactionType === reactionType) {
            return { exist: true, status: "no change" };
        }

        // N·∫øu kh√°c ‚Üí xo√° reaction c≈©, th√™m c√°i m·ªõi ƒë·ªÉ middleware x·ª≠ l√Ω c·∫≠p nh·∫≠t count
        await existed.remove();
    }

    const newReaction = await Reaction.create({
        authReaction: userId,
        targetType,
        targetId,
        reactionType,
    });

    return { reaction: newReaction, status: "Success" };
};



/**
 * üì• Th√™m ho·∫∑c c·∫≠p nh·∫≠t reaction cho b√†i vi·∫øt ho·∫∑c comment
 * @param {String} userId - ID ng∆∞·ªùi d√πng
 * @param {String} targetId - ID ƒë·ªëi t∆∞·ª£ng c·∫ßn th·∫£ reaction
 * @param {String} reactionType - Lo·∫°i reaction (like, love, haha, wow, sad, angry)
 * @returns {Promise<Object>} - Th√¥ng tin reaction ƒë√£ t·∫°o/c·∫≠p nh·∫≠t
 */

export const addOrUpdateCommentReaction = async ({ userId, targetId, reactionType }) => {

    if (!mongoose.Types.ObjectId.isValid(targetId)) {
        throw new BadRequestError("ID ƒë·ªëi t∆∞·ª£ng kh√¥ng h·ª£p l·ªá");
    }

    const existed = await Reaction.findOne({ authReaction: userId, targetType: "Comment", targetId: commentId });
    if (existed) {
        if (existed.reactionType === reactionType) {
            return { exist: true, status: "no change" };
        }
        // N·∫øu c√≥ reaction kh√°c, xo√° v√† th√™m m·ªõi
        await existed.remove();
    }

    const newReaction = await Reaction.create({
        authReaction: userId,
        targetType: "Comment",
        targetId: targetId,
        reactionType,
    });

    // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng reaction cho comment
    await CommentModel.findByIdAndUpdate(commentId, {
        $inc: { [`reactions.${reactionType}`]: 1 }
    });
    return newReaction;
};
/**
 * ‚ùå G·ª° reaction kh·ªèi b√†i vi·∫øt ho·∫∑c comment
 * @param {String} userId - ID ng∆∞·ªùi d√πng
 * @param {String} targetType - Lo·∫°i ƒë·ªëi t∆∞·ª£ng (Post ho·∫∑c Comment)
 * @param {String} targetId - ID ƒë·ªëi t∆∞·ª£ng
 * @returns {Promise<Object>} - K·∫øt qu·∫£ x√≥a reaction
 */
export const removeReaction = async ({ userId, targetId }) => {
    if (!mongoose.Types.ObjectId.isValid(targetId)) {
        throw new BadRequestError("ID ƒë·ªëi t∆∞·ª£ng kh√¥ng h·ª£p l·ªá");
    }
    const existed = await Reaction.findOne({ authReaction: userId, targetType, targetId });

    if (!existed) {
        return { success: false, message: "B·∫°n ch∆∞a th·∫£ reaction n√†o" };
    }
    await existed.remove(); // Middleware t·ª± c·∫≠p nh·∫≠t count 
    return { success: true, message: "ƒê√£ g·ª° reaction th√†nh c√¥ng" };
};
/**
 * üìä L·∫•y danh s√°ch reaction theo b√†i vi·∫øt ho·∫∑c comment
 * @param {String} targetType - Lo·∫°i ƒë·ªëi t∆∞·ª£ng (Post ho·∫∑c Comment)
 * @param {String} targetId - ID ƒë·ªëi t∆∞·ª£ng
 * @returns {Promise<Object>} - T·ªïng h·ª£p s·ªë l∆∞·ª£ng m·ªói lo·∫°i reaction
 */

export const getReactionsService = async ({ targetType, targetId }) => {
    try {
        const reactions = await Reaction.find({ targetType, targetId });
        if (!reactions || reactions.length === 0) {
            return { success: false, message: "Kh√¥ng c√≥ reaction n√†o", summary: null };
        }
        const summary = reactions.reduce((acc, curr) => {
            acc[curr.reactionType] = (acc[curr.reactionType] || 0) + 1;
            return acc;
        }, {});

        return summary;
    }
    catch (error) {
        console.error("L·ªói khi l·∫•y danh s√°ch reaction:", error);
        return { success: false, message: "L·ªói server khi l·∫•y danh s√°ch reaction", err: error };
    }

};
import mongoose from "mongoose";
import Reaction from "../../models/ReactionSchema.js";
import { PostModel } from "../../models/PostSchema.js";
import { BadRequestError, NotFoundError } from "../../utils/ApiError.js";

/**
 * üì• Th√™m ho·∫∑c c·∫≠p nh·∫≠t reaction cho b√†i vi·∫øt ho·∫∑c comment
 * @param {String} userId - ID ng∆∞·ªùi d√πng
 * @param {String} targetType - Lo·∫°i ƒë·ªëi t∆∞·ª£ng (Post ho·∫∑c Comment)
 * @param {String} targetId - ID ƒë·ªëi t∆∞·ª£ng c·∫ßn th·∫£ reaction
 * @param {String} reactionType - Lo·∫°i reaction (like, love, haha, wow, sad, angry)
 * @returns {Promise<Object>}- Th√¥ng tin reaction ƒë√£ t·∫°o/c·∫≠p nh·∫≠t
 */
export const modelsMap = {
    Post: PostModel,
    Comment: mongoose.model('Comment'),
    ...PostModel.discriminators,
};

/**
 * Th√™m, c·∫≠p nh·∫≠t ho·∫∑c x√≥a reaction cho b√†i vi·∫øt ho·∫∑c comment
 * @param {Object} params - Th√¥ng tin reaction
 * @param {String} params.userId - ID ng∆∞·ªùi d√πng
 * @param {String} params.targetType - Lo·∫°i ƒë·ªëi t∆∞·ª£ng (Post, Comment, ho·∫∑c c√°c discriminator)
 * @param {String} params.targetId - ID ƒë·ªëi t∆∞·ª£ng c·∫ßn th·∫£ reaction
 * @param {String} params.reactionType - Lo·∫°i reaction (like, love, haha, wow, sad, angry)
 * @returns {Promise<Object>} - Th√¥ng tin reaction ƒë√£ t·∫°o/c·∫≠p nh·∫≠t/x√≥a
 */
export const addOrUpdateReaction = async ({ userId, targetType, targetId, reactionType }) => {
    try {
        if (!mongoose.Types.ObjectId.isValid(targetId) || !mongoose.Types.ObjectId.isValid(userId)) {
            throw new BadRequestError('ID ng∆∞·ªùi d√πng ho·∫∑c target kh√¥ng h·ª£p l·ªá');
        }

        const validTargetTypes = Object.keys(modelsMap);
        if (!validTargetTypes.includes(targetType)) {
            throw new BadRequestError(`Target type kh√¥ng h·ª£p l·ªá, ph·∫£i l√† m·ªôt trong: ${validTargetTypes.join(', ')}`);
        }

        const validReactionTypes = Reaction.schema.paths.reactionType.enumValues;
        if (!validReactionTypes.includes(reactionType)) {
            throw new BadRequestError(`Lo·∫°i reaction kh√¥ng h·ª£p l·ªá, ph·∫£i l√† m·ªôt trong: ${validReactionTypes.join(', ')}`);
        }

        const Model = modelsMap[targetType];
        const target = await Model.findById(targetId);
        if (!target) {
            throw new NotFoundError(`${targetType} kh√¥ng t·ªìn t·∫°i`);
        }

        if (target.isDeleted) {
            throw new BadRequestError(`${targetType} ƒë√£ b·ªã x√≥a, kh√¥ng th·ªÉ th√™m reaction`);
        }

        const existingReaction = await Reaction.findOne({
            authReaction: new mongoose.Types.ObjectId(userId),
            targetType,
            targetId,
        });

        // N·∫øu ƒë√£ c√≥ reaction v√† lo·∫°i reaction gi·ªëng nhau -> x√≥a reaction (h·ªßy reaction)
        if (existingReaction && existingReaction.reactionType === reactionType) {
            await Reaction.deleteOne({ _id: existingReaction._id });
            return {
                success: true,
                action: 'removed',
                message: 'ƒê√£ h·ªßy reaction',
                reactionType: reactionType
            };
        }

        // N·∫øu ƒë√£ c√≥ reaction nh∆∞ng lo·∫°i reaction kh√°c -> c·∫≠p nh·∫≠t lo·∫°i reaction
        if (existingReaction) {
            const oldReactionType = existingReaction.reactionType;
            const updatedReaction = await Reaction.findOneAndUpdate(
                { _id: existingReaction._id },
                { $set: { reactionType: reactionType } },
                { new: true }
            );

            return {
                success: true,
                action: 'updated',
                reaction: updatedReaction,
                oldReactionType,
                message: 'ƒê√£ c·∫≠p nh·∫≠t lo·∫°i reaction'
            };
        }

        // N·∫øu ch∆∞a c√≥ reaction -> t·∫°o m·ªõi
        const newReaction = await Reaction.create({
            authReaction: new mongoose.Types.ObjectId(userId),
            targetType,
            targetId,
            reactionType,
        });

        return {
            success: true,
            action: 'created',
            reaction: newReaction,
            message: 'ƒê√£ th√™m reaction m·ªõi'
        };
    } catch (error) {
        console.error('Error in addOrUpdateReaction:', error);
        throw error;
    }
};

/**
 * üìä L·∫•y danh s√°ch reaction theo b√†i vi·∫øt ho·∫∑c comment
 * @param {String} targetType - Lo·∫°i ƒë·ªëi t∆∞·ª£ng (Post ho·∫∑c Comment)
 * @param {String} targetId - ID ƒë·ªëi t∆∞·ª£ng
 * @returns {Promise<Object>} - T·ªïng h·ª£p s·ªë l∆∞·ª£ng m·ªói lo·∫°i reaction
 */
export const getReactionsService = async ({ targetType, targetId }) => {
    try {
        const reactions = await Reaction.find({ targetType, targetId });
        if (!reactions || reactions.length === 0) {
            return { success: false, message: "Kh√¥ng c√≥ reaction n√†o", summary: {} };
        }

        const summary = reactions.reduce((acc, curr) => {
            acc[curr.reactionType] = (acc[curr.reactionType] || 0) + 1;
            return acc;
        }, {});

        return { success: true, summary, count: reactions.length };
    } catch (error) {
        console.error("L·ªói khi l·∫•y danh s√°ch reaction:", error);
        return { success: false, message: "L·ªói server khi l·∫•y danh s√°ch reaction", error: error.message };
    }
};

/**
 * üîç Ki·ªÉm tra reaction c·ªßa ng∆∞·ªùi d√πng cho m·ªôt ƒë·ªëi t∆∞·ª£ng
 * @param {String} userId - ID ng∆∞·ªùi d√πng
 * @param {String} targetType - Lo·∫°i ƒë·ªëi t∆∞·ª£ng (Post ho·∫∑c Comment)
 * @param {String} targetId - ID ƒë·ªëi t∆∞·ª£ng
 * @returns {Promise<Object>} - Th√¥ng tin reaction c·ªßa ng∆∞·ªùi d√πng
 */
export const getUserReactionService = async ({ userId, targetType, targetId }) => {
    try {
        if (!mongoose.Types.ObjectId.isValid(targetId) || !mongoose.Types.ObjectId.isValid(userId)) {
            return { success: false, message: 'ID ng∆∞·ªùi d√πng ho·∫∑c target kh√¥ng h·ª£p l·ªá' };
        }

        if (!modelsMap[targetType]) {
            return { success: false, message: 'Lo·∫°i ƒë·ªëi t∆∞·ª£ng kh√¥ng h·ª£p l·ªá' };
        }

        const reaction = await Reaction.findOne({
            authReaction: new mongoose.Types.ObjectId(String(userId)),
            targetType,
            targetId,
        });

        if (!reaction) {
            return { success: false, message: 'Ng∆∞·ªùi d√πng ch∆∞a reaction', hasReacted: false };
        }

        return {
            success: true,
            hasReacted: true,
            reactionType: reaction.reactionType,
            reaction
        };
    } catch (error) {
        console.error("L·ªói khi ki·ªÉm tra reaction c·ªßa ng∆∞·ªùi d√πng:", error);
        return { success: false, message: "L·ªói server khi ki·ªÉm tra reaction", error: error.message };
    }
};

/**
 * üìÑ L·∫•y danh s√°ch b√†i vi·∫øt m√† user ƒë√£ reaction ho·∫∑c comment
 * @param {Object} params - Th√¥ng tin truy v·∫•n
 * @param {String} params.userId - ID ng∆∞·ªùi d√πng
 * @param {Number} params.page - S·ªë trang
 * @param {Number} params.limit - S·ªë l∆∞·ª£ng b√†i vi·∫øt m·ªói trang
 * @returns {Promise<Object>} - Danh s√°ch b√†i vi·∫øt v√† th√¥ng tin ph√¢n trang
 */
export const getUserInteractedPosts = async ({ userId, page = 1, limit = 10 }) => {
    try {
        if (!mongoose.Types.ObjectId.isValid(userId)) {
            return { success: false, message: 'ID ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá' };
        }

        const skip = (page - 1) * limit;

        // L·∫•y ID c√°c b√†i vi·∫øt m√† ng∆∞·ªùi d√πng ƒë√£ reaction
        const reactedPostIds = await Reaction.find({
            authReaction: new mongoose.Types.ObjectId(userId),
            targetType: 'Post'
        }).distinct('targetId');

        // L·∫•y ID c√°c b√†i vi·∫øt m√† ng∆∞·ªùi d√πng ƒë√£ comment
        const commentedPostIds = await mongoose.model('Comment').find({
            author: new mongoose.Types.ObjectId(userId)
        }).distinct('post');

        // K·∫øt h·ª£p v√† lo·∫°i b·ªè tr√πng l·∫∑p
        const interactedPostIds = [...new Set([...reactedPostIds, ...commentedPostIds])];

        const totalPosts = interactedPostIds.length;

        // L·∫•y th√¥ng tin chi ti·∫øt c·ªßa c√°c b√†i vi·∫øt
        const posts = await PostModel.find({
            _id: { $in: interactedPostIds }
        })
            .sort({ updatedAt: -1 })
            .skip(skip)
            .limit(limit)
            .populate('author', 'username avatar');

        return {
            success: true,
            posts,
            pagination: {
                totalPosts,
                currentPage: page,
                totalPages: Math.ceil(totalPosts / limit),
                limit
            }
        };
    } catch (error) {
        console.error("L·ªói khi l·∫•y danh s√°ch b√†i vi·∫øt ƒë√£ t∆∞∆°ng t√°c:", error);
        return { success: false, message: "L·ªói server khi l·∫•y danh s√°ch b√†i vi·∫øt", error: error.message };
    }
};
import PetProfile from "../../models/PetProfile.js";
import User from "../../models/user.js";


// H√†m ti·ªán √≠ch ki·ªÉm tra pet t·ªìn t·∫°i
export const getPetOrThrow = async (petId) => {
    const pet = await PetProfile.findById(petId);
    if (!pet) throw new Error("Th√∫ c∆∞ng kh√¥ng t·ªìn t·∫°i!");
    return pet;
};

/**
 * üîß X√¢y d·ª±ng b·ªô l·ªçc th√∫ c∆∞ng t·ª´ query
 */
const buildPetFilter = (ownerId, query) => {
    const filter = { ownerId };

    if (query.name) {
        filter.name = { $regex: query.name, $options: 'i' };
    }

    if (query.gender) {
        filter.gender = query.gender;
    }

    if (query.petState) {
        filter.petState = query.petState;
    }

    if (query.ageMin || query.ageMax) {
        filter.age = {};
        if (query.ageMin) filter.age.$gte = parseInt(query.ageMin);
        if (query.ageMax) filter.age.$lte = parseInt(query.ageMax);
    }

    if (query.breed) {
        filter.breed = { $in: query.breed.split(',') };
    }

    if (query.breedName) {
        filter.breedName = { $regex: query.breedName, $options: 'i' };
    }

    if (query.search) {
        const searchRegex = new RegExp(query.search, 'i');
        filter.$or = [
            { name: searchRegex },
            { breed: searchRegex },
            { breedName: searchRegex }
        ];
    }

    return filter;
};


export const getAllPets = async ({ page = 1, limit = 10 }) => {
    const skip = (page - 1) * limit;

    const filter = {
        isDeleted: false,
        petState: "ReadyToAdopt"
    };

    const [pets, total] = await Promise.all([
        PetProfile.find(filter)
            .sort({ createdAt: -1 })
            .skip(skip)
            .limit(limit)
            .lean(),
        PetProfile.countDocuments(filter)
    ]);

    return { success: true, data: pets, total, page, limit };
};

/**
 * üÜï T·∫°o th√∫ c∆∞ng m·ªõi
 * @param {String} ownerId - ID c·ªßa ch·ªß s·ªü h·ªØu
 * @param {Object} petData - D·ªØ li·ªáu th√∫ c∆∞ng
 * @returns {Promise<Object>} - H·ªì s∆° th√∫ c∆∞ng ƒë√£ t·∫°o
 */
export const createPetProfile = async (ownerId, petData) => {
    try {
        const userExists = await User.findById(ownerId);
        if (!userExists) throw new Error("Pet Owner Not Exist !");

        // T·∫°o th√∫ c∆∞ng m·ªõi
        const newPet = new PetProfile({ ownerId, ...petData });
        return await newPet.save();
    } catch (error) {
        throw new Error(`L·ªói khi t·∫°o h·ªì s∆° th√∫ c∆∞ng: ${error.message}`);
    }
};

/**
 * üì• Upload avatar th√∫ c∆∞ng
 * @param {String} petId - ID c·ªßa th√∫ c∆∞ng
 * @param {String} avatarUrl - URL avatar m·ªõi
 * @returns {Promise<Object>} - H·ªì s∆° th√∫ c∆∞ng ƒë√£ c·∫≠p nh·∫≠t
 */
export const updatePetAvatar = async (petId, avatarUrl) => {
    const pet = await getPetOrThrow(petId);
    pet.avatar = avatarUrl;
    return await pet.save();
};

/**
 * üìÇ Upload gi·∫•y ch·ª©ng nh·∫≠n
 * @param {String} petId - ID c·ªßa th√∫ c∆∞ng
 * @param {Object} certificateData - D·ªØ li·ªáu gi·∫•y ch·ª©ng nh·∫≠n
 * @returns {Promise<Object>} - H·ªì s∆° th√∫ c∆∞ng ƒë√£ c·∫≠p nh·∫≠t
 */
export const uploadPetCertificate = async (petId, certificateData) => {
    const pet = await getPetOrThrow(petId);

    pet.certifications.push({
        name: certificateData.name,
        type: certificateData.type,
        url: certificateData.url,
        issuedDate: new Date(),
    });

    return await pet.save();
};

/**
 * üìë C·∫≠p nh·∫≠t h·ªì s∆° th√∫ c∆∞ng
 * @param {String} petId - ID c·ªßa th√∫ c∆∞ng
 * @param {Object} updatedData - D·ªØ li·ªáu c·∫ßn c·∫≠p nh·∫≠t
 * @returns {Promise<Object>} - H·ªì s∆° th√∫ c∆∞ng ƒë√£ c·∫≠p nh·∫≠t
 */
export const updatePetProfile = async (petId, updatedData) => {
    const pet = await PetProfile.findByIdAndUpdate(
        petId,
        { $set: updatedData },
        { new: true, runValidators: true }
    );
    if (!pet) throw new Error("Th√∫ c∆∞ng kh√¥ng t·ªìn t·∫°i!");
    return pet;
};

/**
 * üóë X√≥a th√∫ c∆∞ng
 * @param {String} petId - ID c·ªßa th√∫ c∆∞ng
 * @returns {Promise<Object>} - H·ªì s∆° th√∫ c∆∞ng ƒë√£ x√≥a
 */
export const deletePet = async (petId) => {
    try {
        const pet = await PetProfile.findById(petId);
        if (!pet) throw new Error("Th√∫ c∆∞ng kh√¥ng t·ªìn t·∫°i!");
        if (pet.petState === "Adopted") {
            pet.isDeleted = true;
            await pet.save();
            return pet;
        } else {
            const deletedPet = await PetProfile.findByIdAndDelete(petId);
            return deletedPet;
        }
    } catch (error) {
        throw new Error(`L·ªói khi x√≥a th√∫ c∆∞ng: ${error.message}`);
    }
};


/**
 * üîç L·∫•y danh s√°ch th√∫ c∆∞ng theo ch·ªß s·ªü h·ªØu
 * @param {String} ownerId - ID c·ªßa ch·ªß s·ªü h·ªØu
 * @returns {Promise<Array>} - Danh s√°ch th√∫ c∆∞ng
 */
export const getPetsByOwnerWithFilter = async (ownerId, query, page = 1, limit = 10) => {
    const skip = (page - 1) * limit;
    const filter = buildPetFilter(ownerId, query);

    const [pets, total] = await Promise.all([
        PetProfile.find(filter).sort({ createdAt: -1 }).skip(skip).limit(limit).lean(),
        PetProfile.countDocuments(filter)
    ]);

    return {
        pets,
        pagination: {
            total,
            page,
            limit,
            totalPages: Math.ceil(total / limit)
        }
    };
};

/**
 * üìë Filter pet profiles based on given criteria
 * @param {Object} filter - Object ch·ª©a c√°c ti√™u ch√≠ filter: { breed, breedName, age, gender }
 * @param {Number} skip - S·ªë l∆∞·ª£ng b·∫£n ghi c·∫ßn b·ªè qua (ph√¢n trang)
 * @param {Number} limit - S·ªë l∆∞·ª£ng b·∫£n ghi c·∫ßn l·∫•y (ph√¢n trang)
 * @returns {Promise<Array>} - Danh s√°ch pet ph√π h·ª£p v·ªõi ti√™u ch√≠
 */
export const filterPetProfiles = async (filter, skip, limit) => {
    const [pets, total] = await Promise.all([
        PetProfile.find(filter)
            .skip(skip)
            .limit(limit)
            .sort({ createdAt: -1 })
            .lean(),
        PetProfile.countDocuments(filter)
    ]);

    return {
        success: true,
        data: pets,
        total,
        skip,
        limit
    };
};

/**
 * T√¨m th√∫ c∆∞ng theo microchipId
 * @param {String} microchipId - Microchip ID c·∫ßn ki·ªÉm tra
 * @returns {Promise<Object|null>} - Th√∫ c∆∞ng n·∫øu t√¨m th·∫•y, null n·∫øu kh√¥ng t√¨m th·∫•y
 */
export const findPetByMicrochipId = async (microchipId) => {
    try {
        return await PetProfile.findOne({ microchipId });
    } catch (error) {
        throw new Error(`L·ªói khi t√¨m ki·∫øm th√∫ c∆∞ng theo microchipId: ${error.message}`);
    }
};

/**
 * C·∫≠p nh·∫≠t microchip ID
 * @param {String} petId - ID c·ªßa th√∫ c∆∞ng
 * @param {String} microchipId - Microchip ID m·ªõi
 * @returns {Promise<Object>} - H·ªì s∆° th√∫ c∆∞ng ƒë√£ c·∫≠p nh·∫≠t
 */
export const updateMicrochipId = async (petId, microchipId) => {
    const pet = await getPetOrThrow(petId);
    pet.microchipId = microchipId;
    return await pet.save();
};

/**
 * Th√™m b·∫£n ghi ti√™m ph√≤ng m·ªõi
 * @param {String} petId - ID c·ªßa th√∫ c∆∞ng
 * @param {Object} vaccinationData - D·ªØ li·ªáu ti√™m ph√≤ng
 * @returns {Promise<Object>} - H·ªì s∆° th√∫ c∆∞ng ƒë√£ c·∫≠p nh·∫≠t
 */
export const addVaccinationRecord = async (petId, vaccinationData) => {
    const pet = await getPetOrThrow(petId);
    pet.vaccinationStatus.push(vaccinationData);
    return await pet.save();
};

/**
 * Th√™m ·∫£nh v√†o album th√∫ c∆∞ng
 * @param {String} petId - ID c·ªßa th√∫ c∆∞ng
 * @param {String} photoUrl - URL ·∫£nh c·∫ßn th√™m
 * @returns {Promise<Object>} - H·ªì s∆° th√∫ c∆∞ng ƒë√£ c·∫≠p nh·∫≠t
 */
export const addPhotoToAlbum = async (petId, photoUrl) => {
    const pet = await getPetOrThrow(petId);
    pet.petAlbum.push(photoUrl);
    return await pet.save();
};

/**
 * X√≥a ·∫£nh kh·ªèi album th√∫ c∆∞ng
 * @param {String} petId - ID c·ªßa th√∫ c∆∞ng
 * @param {String} photoUrl - URL ·∫£nh c·∫ßn x√≥a
 * @returns {Promise<Object>} - H·ªì s∆° th√∫ c∆∞ng ƒë√£ c·∫≠p nh·∫≠t
 */
export const removePhotoFromAlbum = async (petId, photoUrl) => {
    const pet = await getPetOrThrow(petId);
    pet.petAlbum = pet.petAlbum.filter(url => url !== photoUrl);
    return await pet.save();
};

/**
 * L·∫•y danh s√°ch th√∫ c∆∞ng theo ch·ªß s·ªü h·ªØu
 * @param {String} ownerId - ID c·ªßa ch·ªß s·ªü h·ªØu
 * @returns {Promise<Array>} - Danh s√°ch th√∫ c∆∞ng
 */
export const getPetsByOwner = async (ownerId) => {
    return await PetProfile.find({ ownerId}).lean();
};


/**
 * üîç T√¨m ki·∫øm th√∫ c∆∞ng theo nhi·ªÅu ti√™u ch√≠, c√≥ ph√¢n trang v√† s·∫Øp x·∫øp
 * @param {Object} query - Query t·ª´ client
 * @param {String} ownerId - ID c·ªßa ng∆∞·ªùi d√πng (tu·ª≥ ch·ªçn)
 * @returns {Promise<{ results: Array, total: Number }>}
 */
export const searchPets = async (query, ownerId = null) => {
    const filter = buildPetFilter(ownerId, query);

    // Ph√¢n trang
    const page = parseInt(query.page) || 1;
    const limit = parseInt(query.limit) || 10;
    const skip = (page - 1) * limit;

    // S·∫Øp x·∫øp (m·∫∑c ƒë·ªãnh theo th·ªùi gian t·∫°o m·ªõi nh·∫•t)
    let sort = { createdAt: -1 };
    if (query.sortBy && query.order) {
        sort = { [query.sortBy]: query.order === 'asc' ? 1 : -1 };
    }

    const [results, total] = await Promise.all([
        PetProfile.find(filter).sort(sort).skip(skip).limit(limit).lean(),
        PetProfile.countDocuments(filter)
    ]);

    return { results, total };
};
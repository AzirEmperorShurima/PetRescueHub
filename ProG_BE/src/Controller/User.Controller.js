import { StatusCodes } from "http-status-codes";
import { COOKIE_PATHS, TOKEN_TYPE } from "../../config.js";
import Role from "../models/Role.js";
import User from "../models/user.js";
import { getUserFieldFromToken } from "../services/User/User.service.js";



/**
 * @detail function focus to premium users
 */
export const buyPremium = async (req, res) => {
    try {
        const userId = getUserFieldFromToken(req, COOKIE_PATHS.ACCESS_TOKEN.CookieName, 'id');
        if (!userId) {
            return res.status(StatusCodes.UNAUTHORIZED).json({ message: "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ th·ª±c hi·ªán h√†nh ƒë·ªông n√†y" });
        }
        const { paymentMethod, duration } = req.body;
        if (!paymentMethod || duration) {
            return res.status(StatusCodes.BAD_REQUEST).json({ message: "Thi·∫øu th√¥ng tin thanh to√°n!" });
        }

        const validDurations = [7, 30, 90, 180, 365]; // Danh s√°ch th·ªùi gian h·ª£p l·ªá
        if (!validDurations.includes(duration)) {
            return res.status(StatusCodes.BAD_REQUEST).json({ message: "Th·ªùi gian kh√¥ng h·ª£p l·ªá!" });
        }

        const _user = await User.findById(userId);
        if (!_user) {
            return res.status(StatusCodes.NOT_FOUND).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" });
        }

        // Ki·ªÉm tra n·∫øu user ƒë√£ l√† VIP
        if (_user.isVIP) {
            return res.status(StatusCodes.BAD_REQUEST).json({ message: "Ng∆∞·ªùi d√πng ƒë√£ l√† VIP!" });
        }
        const paymentOptions = {
            duration: duration,
            paymentMethod: paymentMethod
        }
        // G·ªçi API c·ªïng thanh to√°n (v√≠ d·ª•: Stripe, PayPal, VNPay, MoMo)
        const paymentResult = await processPayment(User, paymentOptions);
        if (!paymentResult.success) {
            return res.status(StatusCodes.PAYMENT_REQUIRED).json({ message: "Thanh to√°n th·∫•t b·∫°i!", error: paymentResult.error });
        }

        // C·∫≠p nh·∫≠t th√¥ng tin VIP
        // const vipRole = await Role.findOne({ name: "VIP" });
        // if (!vipRole) {
        //     return res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ message: "Role 'VIP' ch∆∞a ƒë∆∞·ª£c t·∫°o!" });
        // }

        _user.isVIP = true;
        _user.premiumExpiresAt = new Date(Date.now() + (duration * 24 * 60 * 60 * 1000)); // VIP 30 ng√†y
        _user.roles.push(vipRole._id);
        await _user.save();

        return res.status(StatusCodes.OK).json({
            message: "Mua VIP th√†nh c√¥ng! Ch√∫c m·ª´ng b·∫°n ƒë√£ tr·ªü th√†nh th√†nh vi√™n VIP üéâ",
            isVIP: _user.isVIP,
            premiumExpiresAt: _user.premiumExpiresAt
        });

    } catch (error) {
        console.error("L·ªói khi mua Premium:", error);
        return res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({
            message: "L·ªói khi x·ª≠ l√Ω thanh to√°n!",
            error: error.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh"
        });
    }
};

export const updateUserProfile = async (req, res) => {
    try {
        const updateData = req.body;
        const allowedUpdates = new Set(["fullname", "avatar", "phonenumber", "address", "biography", "gender", "birthdate"]);
        const updates = Object.keys(updateData)
            .filter(key => allowedUpdates.has(key) && updateData[key] !== undefined);

        if (req.avatarUrl) {
            updateData.avatar = req.avatarUrl;
            updates.push("avatar");
        }

        if (updates.length === 0) {
            return res.status(StatusCodes.BAD_REQUEST).json({ 
                success: false, 
                message: "Kh√¥ng c√≥ th√¥ng tin c·∫ßn c·∫≠p nh·∫≠t!" 
            });
        }

        const updateFields = Object.fromEntries(
            updates.map(key => [key, updateData[key]])
        );

        const updatedUser = await User.findByIdAndUpdate(
            req.user._id,
            { $set: updateFields },
            { new: true, runValidators: true }
        );

        // Tr·∫£ v·ªÅ th√¥ng tin ƒë√£ ƒë∆∞·ª£c l·ªçc
        return res.status(StatusCodes.OK).json({
            success: true,
            message: "C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng",
            user: {
                id: updatedUser.id,
                username: updatedUser.username,
                fullname: updatedUser.fullname,
                email: updatedUser.email,
                avatar: updatedUser.avatar,
                gender: updatedUser.gender,
                birthdate: updatedUser.birthdate,
                biography: updatedUser.biography,
                phonenumber: updatedUser.phonenumber,
                address: updatedUser.address,
                isVIP: updatedUser.isVIP,
                volunteerStatus: updatedUser.volunteerStatus
            }
        });
    } catch (error) {
        console.error("L·ªói c·∫≠p nh·∫≠t th√¥ng tin:", error);
        return res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ 
            success: false, 
            message: "ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t th√¥ng tin" 
        });
    }
};

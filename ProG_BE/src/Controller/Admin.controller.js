import Role from "../models/Role.js";
import user from "../models/user.js";
import { createPackage } from "../services/PackageService/PackageService.js";
import { getUserIdFromCookies } from "../services/User/User.service.js";


/**
 * @desc L·∫•y danh s√°ch ng∆∞·ªùi d√πng (Ch·ªâ Admin)
 */
export const getUsers = async (req, res) => {
    try {
        const users = await user.find().populate("roles", "name");
        res.json(users);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

/**
 * @desc X√≥a ng∆∞·ªùi d√πng (Ch·ªâ Admin)
 */
export const deleteUser = async (req, res) => {
    try {
        const { id_delete } = req.body;

        const spy = getUserIdFromCookies(req)
        if (!spy) {
            return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a ng∆∞·ªùi d√πng!" });
        }
        const _user = await user.findById(spy).populate("roles", "name");
        if (!_user) return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" });

        const userRoles = _user.roles.map(role => role.name); // L·∫•y danh s√°ch t√™n roles
        if (!userRoles.includes("admin")) {
            return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a ng∆∞·ªùi d√πng!" });
        }

        if (spy === id_delete) {  // üîπ Ki·ªÉm tra n·∫øu admin ƒëang x√≥a ch√≠nh m√¨nh
            return res.status(400).json({ message: "B·∫°n kh√¥ng th·ªÉ t·ª± x√≥a ch√≠nh m√¨nh!" });
        }
        const deletedUser = await user.findByIdAndDelete(id_delete);

        if (!deletedUser) return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" });

        res.json({ message: "X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng!" });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

/**
 * @desc Admin duy·ªát volunteer (Th√™m role volunteer)
 */

export const acceptApproveVolunteer = async (req, res) => {
    try {

        const userId = getUserIdFromCookies(req);
        // T√¨m ng∆∞·ªùi d√πng theo ID
        const _user = await user.findById(userId).populate("roles");

        if (!_user) return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" });

        const volunteerRole = await Role.findOne({ name: "volunteer" }).select("_id");
        if (!volunteerRole) return res.status(400).json({ message: "Role 'volunteer' ch∆∞a ƒë∆∞·ª£c t·∫°o!" });

        // Ki·ªÉm tra n·∫øu user ƒë√£ c√≥ role "volunteer"
        // const hasVolunteerRole = _user.roles.some(role => role.name === "volunteer");
        // if (hasVolunteerRole) {
        //     return res.status(400).json({ message: "Ng∆∞·ªùi d√πng ƒë√£ l√† volunteer!" });
        // }
        // _user.roles = [...new Set([...user.roles, volunteerRole._id])];
        if (_user.roles.includes(volunteerRole._id)) {
            return res.status(400).json({ message: "Ng∆∞·ªùi d√πng ƒë√£ l√† volunteer!" });
        }
        /**
         * @desc n·∫øu ch∆∞a populate
         */
        // if (user.roles.includes(volunteerRole._id)) {
        //     return res.status(400).json({ message: "User ƒë√£ c√≥ role volunteer!" });
        // }

        // Th√™m role "volunteer" cho user
        _user.roles.push(volunteerRole._id);
        if (!_user.isActive) {
            _user.isActive = true; // K√≠ch ho·∫°t t√†i kho·∫£n sau khi duy·ªát
        }
        _user.volunteerRequestStatus = "approved";
        await _user.save();

        res.json({ message: "Ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c ph√™ duy·ªát l√†m volunteer!" });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

/**
 * @desc Admin t·ª´ ch·ªëi volunteer (X√≥a role volunteer)
 */
export const rejectVolunteerRequest = async (req, res) => {
    try {
        const { userId } = req.body;

        const _user = await user.findById(userId);
        if (!_user) {
            return res.status(404).json({ message: "User kh√¥ng t·ªìn t·∫°i!" });
        }

        if (_user.volunteerRequestStatus !== "pending") {
            return res.status(400).json({ message: "Ng∆∞·ªùi d√πng ch∆∞a g·ª≠i y√™u c·∫ßu ho·∫∑c y√™u c·∫ßu ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω!" });
        }

        _user.volunteerRequestStatus = "rejected";
        await _user.save();

        res.status(200).json({ message: "Y√™u c·∫ßu volunteer ƒë√£ b·ªã t·ª´ ch·ªëi!" });
    } catch (error) {
        console.error("L·ªói khi t·ª´ ch·ªëi volunteer:", error);
        res.status(500).json({ message: `L·ªói m√°y ch·ªß: ${error.message}` });
    }
};

/**
 * @desc Admin X√≥a role volunteer ()
 */
export const revokeVolunteerRole = async (req, res) => {
    try {
        const { userId } = req.body;

        const [_user, volunteerRole] = await Promise.all([
            user.findById(userId),
            Role.findOne({ name: "volunteer" }).select("_id")
        ]);
        if (!_user) return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" });
        if (!volunteerRole) return res.status(400).json({ message: "Role 'volunteer' ch∆∞a ƒë∆∞·ª£c t·∫°o!" });

        if (!_user.roles.includes(volunteerRole._id)) {
            return res.status(400).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng c√≥ volunteer role!" });
        }

        _user.roles = _user.roles.filter(role => role.toString() !== volunteerRole._id.toString());
        await _user.save();

        return res.status(200).json({ message: "Quy·ªÅn volunteer ƒë√£ b·ªã thu h·ªìi!" });
    } catch (error) {
        console.error("L·ªói khi thu h·ªìi quy·ªÅn volunteer:", error);
        res.status(500).json({ message: `L·ªói m√°y ch·ªß: ${error.message}` });
    }
};



// add new buy package 
export const addNewPackage = async (req, res) => {
    try {
        const { package_id, name, description, price, duration, currency } = req.body;

        const packageData = {
            package_id,
            name,
            description,
            price,
            duration,
            currency
        }
        const result = await createPackage(packageData);
        if (!result.success) {
            return res.status(400).json({ message: result.message });
        }
        return res.status(200).json({ message: "Th√™m m·ªõi g√≥i d·ªãch v·ª• th√†nh c√¥ng!", package: result.data });

    }
    catch (error) {
        console.error("L·ªói khi th√™m m·ªõi g√≥i d·ªãch v·ª•:", error);
        return res.status(500).json({ message: "L·ªói m√°y ch·ªß!", error: error.message });
    }
}
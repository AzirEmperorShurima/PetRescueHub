import mongoose from "mongoose";

const QuestionSchema = new mongoose.Schema(
    {
        title: { type: String, required: true, trim: true },
        description: { type: String, required: true, trim: true },
        author: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true },
        content: { type: String, required: true },
        imageUrls: [{ type: String }],
        tags: [{ type: String, index: true }], // Index gi√∫p t√¨m ki·∫øm nhanh h∆°n
        favoriteCount: { type: Number, default: 0 }, // T·ªïng s·ªë l∆∞·ª£t y√™u th√≠ch
        views: { type: Number, default: 0 },
        questionStatus: { type: String, enum: ["open", "hidden"], default: "open" },
        createdAt: { type: Date, default: Date.now },
        updatedAt: { type: Date, default: Date.now }
    },
    { timestamps: true }
);

// üìå Virtual field: ƒê·∫øm reaction t·ª´ b·∫£ng Reaction
QuestionSchema.virtual("reactionCount", {
    ref: "Reaction",
    localField: "_id",
    foreignField: "question",
    count: true
});

// üî• Middleware ki·ªÉm tra quy·ªÅn tr∆∞·ªõc khi ƒëƒÉng c√¢u h·ªèi
// QuestionSchema.pre("save", async function (next) {
//     try {
//         const userPermissions = await mongoose.model("UserPermissions").findOne({ user: this.author });

//         if (!userPermissions) {
//             throw new Error("Kh√¥ng t√¨m th·∫•y quy·ªÅn c·ªßa ng∆∞·ªùi d√πng!");
//         }
//         if (userPermissions.isBanned) {
//             throw new Error("B·∫°n ƒë√£ b·ªã c·∫•m ho·∫°t ƒë·ªông!");
//         }
//         if (!userPermissions.canPostQuestion) {
//             throw new Error("B·∫°n kh√¥ng c√≥ quy·ªÅn ƒëƒÉng c√¢u h·ªèi!");
//         }

//         next();
//     } catch (error) {
//         next(error);
//     }
// });

// üî• Middleware c·∫≠p nh·∫≠t `updatedAt` khi ch·ªânh s·ª≠a
QuestionSchema.pre("findOneAndUpdate", function (next) {
    this.set({ updatedAt: Date.now() });
    next();
});

export default mongoose.model("Question", QuestionSchema);
